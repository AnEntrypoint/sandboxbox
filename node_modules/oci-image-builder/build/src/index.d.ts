/// <reference types="node" />
import { GCRAuthOptions } from './auth/gcr';
import { DockerAuthResult } from './credentials-helper';
import { ImageLocation } from './image-specifier';
import * as packer from './packer';
import { ImageConfig, ManifestV2, RegistryClient } from './registry';
export { RegistryClient } from './registry';
export declare type ImageOptions = {
    auth?: AuthConfig;
};
export declare type ImageData = {
    manifest: ManifestV2;
    config: ImageConfig;
};
export declare class Image {
    private options;
    private image;
    private targetImage;
    private imageData;
    private originalManifest?;
    private clients;
    private pending;
    private syncedBaseImage;
    WorkingDir?: string;
    Cmd?: string[];
    Env?: string[];
    constructor(imageSpecifier: string, targetImage?: string | ImageOptions, options?: ImageOptions);
    getImageConfig(): Promise<{
        Hostname: string;
        Domainname: string;
        User: string;
        AttachStdin: boolean;
        AttachStdout: boolean;
        AttachStderr: boolean;
        Tty: boolean;
        OpenStdin: boolean;
        StdinOnce: boolean;
        Env: string[];
        Cmd: string[];
        ArgsEscaped: boolean;
        Image: string;
        Volumes: any;
        WorkingDir: string;
        Entrypoint: string[] | null;
        OnBuild: any;
        Labels: any;
    }>;
    addLayer(digest: string, uncompressedDigest: string, size: number, urls?: string[]): Promise<{
        mediaType: string;
        digest: string;
        size: number;
        urls: string[] | undefined;
    } & {
        uncompressedDigest: string;
    }>;
    removeLayer(digest: string): Promise<boolean>;
    addFiles(dir: string | {
        [dir: string]: string;
    }, targetDir?: string | packer.PackOptions, options?: packer.PackOptions): Promise<{
        mediaType: string;
        digest: string;
        size: number;
        uncompressedDigest: string;
    }>;
    getImageData(): Promise<ImageData>;
    loadImageData(image?: ImageLocation): Promise<{
        manifest: ManifestV2;
        config: ImageConfig;
    }>;
    client(_image?: ImageLocation | string, write?: boolean): Promise<RegistryClient>;
    save(tags?: string[], options?: SyncOptions & {
        Env?: string[];
        Cmd?: string[];
        WorkingDir?: string;
    }): Promise<{
        status: number;
        digest: string;
        body: Buffer;
    }>;
    private authKey;
    sync(options?: SyncOptions): Promise<{}[]>;
    private syncBaseImage;
    private nameSpacedImageName;
}
export declare const auth: (imageArg: string | ImageLocation, scope: string, options?: AuthConfig | undefined) => Promise<DockerAuthResult>;
export declare const pack: (paths: string | {
    [toPath: string]: string | packer.CustomFile;
}, options?: packer.PackOptions | undefined) => any;
export declare const CustomFile: typeof packer.CustomFile;
export interface AuthConfig {
    'gcr.io'?: GCRAuthOptions;
    'docker.io'?: any;
    [k: string]: DockerAuthResult | any;
}
export interface SyncOptions {
    copyRemoteLayers?: boolean;
    ignoreExists?: boolean;
}
