/// <reference types="node" />
import { Readable } from 'stream';
import { DockerAuthResult } from './credentials-helper';
export declare class RegistryClient {
    _auth?: DockerAuthResult;
    _registry: string;
    _repository: string;
    _protocol: string;
    constructor(registry: string, repository: string, auth?: DockerAuthResult);
    tags(): Promise<TagResult>;
    manifest(tag: string): Promise<ManifestV2>;
    manifestUpload(tag: string | false, manifest: Buffer | {}): Promise<{
        status: number;
        digest: string;
        body: Buffer;
    }>;
    blobExists(digest: string): Promise<boolean>;
    blob(digest: string, stream?: false | undefined): Promise<Buffer>;
    blob(digest: string, stream?: true): Promise<Readable>;
    upload(blob: Readable | Buffer, contentLength?: number, digest?: string): Promise<{
        contentLength: number;
        digest: string;
    }>;
    mount(digest: string, fromRepository: string): Promise<{}>;
    private authHeader;
}
export interface ManifestV2 {
    schemaVersion: number;
    mediaType: string;
    config: Layer;
    layers: Layer[];
}
export interface ImageConfig {
    rootfs: {
        diff_ids: string[];
    };
    config: {
        Hostname: string;
        Domainname: string;
        User: string;
        AttachStdin: boolean;
        AttachStdout: boolean;
        AttachStderr: boolean;
        Tty: boolean;
        OpenStdin: boolean;
        StdinOnce: boolean;
        Env: string[];
        Cmd: string[];
        ArgsEscaped: boolean;
        Image: string;
        Volumes: any;
        WorkingDir: string;
        Entrypoint: null | string[];
        OnBuild: any;
        Labels: any;
    };
}
export interface Layer {
    mediaType: string;
    size: number;
    digest: string;
    urls?: string[];
}
export interface TagResult {
    child: any[];
    manifest: {};
    name: string;
    tags: string[];
}
