import { existsSync } from 'fs';
import { execSync } from 'child_process';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';
import { color } from './colors.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export function getPodmanPath() {
  const platform = process.platform;
  const arch = process.arch === 'arm64' ? 'arm64' : 'amd64';
  let bundledPodman;

  if (platform === 'win32') {
    bundledPodman = resolve(__dirname, '..', 'bin', 'podman.exe');
  } else if (platform === 'darwin') {
    bundledPodman = resolve(__dirname, '..', 'bin', 'podman');
  } else {
    bundledPodman = resolve(__dirname, '..', 'bin', `podman-remote-static-linux_${arch}`);
  }

  if (existsSync(bundledPodman)) {
    return bundledPodman;
  }
  return 'podman';
}

export function ensureBackend(podmanPath) {
  if (process.platform === 'linux') return true;

  const execOptions = { encoding: 'utf-8', stdio: 'pipe', shell: true };

  try {
    execSync(`"${podmanPath}" info`, execOptions);
    return true;
  } catch (infoError) {
    if (!infoError.message.includes('Cannot connect to Podman')) throw infoError;

    console.log(color('yellow', '\nüîß Initializing Podman backend (first run, takes 2-3 minutes)...'));

    try {
      const machineListOutput = execSync(`"${podmanPath}" machine list --format json`, execOptions);
      const machines = JSON.parse(machineListOutput || '[]');

      if (machines.length === 0) {
        console.log(color('cyan', '   Creating Podman machine...'));
        const initCmd = process.platform === 'win32'
          ? `"${podmanPath}" machine init --rootful=false`
          : `"${podmanPath}" machine init`;
        execSync(initCmd, { stdio: 'inherit', shell: true });
      }

      console.log(color('cyan', '   Starting Podman machine...'));
      execSync(`"${podmanPath}" machine start`, { stdio: 'inherit', shell: true });
      console.log(color('green', '‚úÖ Podman backend ready\n'));
      return true;
    } catch (backendError) {
      console.log(color('red', `\n‚ùå Backend setup failed: ${backendError.message}`));
      return false;
    }
  }
}

export function checkPodman() {
  const podmanPath = getPodmanPath();
  const isBundled = podmanPath.includes('bin');

  try {
    const execOptions = {
      encoding: 'utf-8',
      stdio: 'pipe',
      shell: process.platform === 'win32'
    };

    const version = execSync(`"${podmanPath}" --version`, execOptions).trim();
    console.log(color('green', `‚úÖ ${version}${isBundled ? ' (bundled)' : ''}`));
    return podmanPath;
  } catch (error) {
    console.log('‚ùå Podman not found');
    console.log('\nüì¶ Auto-downloading Podman...');

    try {
      const scriptPath = resolve(__dirname, '..', 'scripts', 'download-podman.js');
      execSync(`node "${scriptPath}"`, { stdio: 'inherit', cwd: __dirname, shell: process.platform === 'win32' });

      const newPodmanPath = getPodmanPath();
      if (!existsSync(newPodmanPath) && newPodmanPath !== 'podman') {
        throw new Error('Download completed but binary not found');
      }

      const execOptions = {
        encoding: 'utf-8',
        stdio: 'pipe',
        shell: process.platform === 'win32'
      };

      const newVersion = execSync(`"${newPodmanPath}" --version`, execOptions).trim();
      console.log(`\n‚úÖ ${newVersion} (auto-downloaded)`);
      console.log('‚úÖ Portable Podman ready');

      return newPodmanPath;
    } catch (downloadError) {
      console.log(`\n‚ùå Auto-download failed: ${downloadError.message}`);
    }

    console.log('\nüí° Please install Podman manually:');
    if (process.platform === 'win32') {
      console.log('   winget install RedHat.Podman');
    } else if (process.platform === 'darwin') {
      console.log('   brew install podman');
      console.log('   podman machine init && podman machine start');
    } else {
      console.log('   sudo apt-get install podman       # Ubuntu/Debian');
      console.log('   sudo dnf install podman           # Fedora');
    }
    console.log('');
    return null;
  }
}