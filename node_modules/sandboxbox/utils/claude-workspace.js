import { execSync } from 'child_process';
import { buildContainerMounts } from './isolation.js';

export function getClaudeEnvironment() {
  const envVars = {};

  // Collect Anthropic and Claude environment variables
  for (const [key, value] of Object.entries(process.env)) {
    if (key.startsWith('ANTHROPIC_') || key.startsWith('CLAUDE')) {
      envVars[key] = value;
    }
  }

  return envVars;
}

export function buildClaudeContainerCommand(projectPath, podmanPath, command = 'claude', customMounts = null) {
  const envVars = getClaudeEnvironment();
  const envArgs = Object.entries(envVars)
    .map(([key, value]) => `-e ${key}="${value}"`)
    .join(' ');

  const homeDir = process.platform === 'win32' ? process.env.USERPROFILE : process.env.HOME;

  let allMounts = [];

  if (customMounts) {
    // Use provided custom mounts (includes git identity and host remote)
    allMounts = customMounts;
  } else {
    // Build base mounts from isolation utility (includes git identity)
    const baseMounts = buildContainerMounts(projectPath);
    allMounts = baseMounts;
  }

  // Add Claude-specific mounts
  const claudeMounts = [
    `-v "${homeDir}/.claude:/root/.claude-host:ro"`,
    `-v "${process.cwd()}/claude-settings.json:/root/.claude/settings.json:ro"`
  ];

  allMounts = [...allMounts, ...claudeMounts];

  return `${podmanPath} run --rm -it ${allMounts.join(' ')} ${envArgs} --env HOME=/root sandboxbox-local:latest ${command}`;
}

export function createClaudeDockerfile() {
  return `FROM node:20

# Install development tools
RUN apt-get update && apt-get install -y --no-install-recommends \\
    git curl bash sudo nano vim \\
    && apt-get clean && rm -rf /var/lib/apt/lists/*

WORKDIR /workspace

# Install Claude Code
RUN npm install -g @anthropic-ai/claude-code@latest

# Setup MCP servers after Claude installation
RUN claude mcp add glootie -- npx -y mcp-glootie@latest && \\
    claude mcp add vexify -- npx -y mcp-vexify@latest && \\
    claude mcp add playwright -- npx @playwright/mcp@latest

# Create isolated workspace script with cleanup
RUN echo '#!/bin/bash\\nset -e\\n\\necho "🚀 Starting SandboxBox with Claude Code in isolated environment..."\\necho "📁 Working directory: /workspace"\\necho "🎯 This is an isolated copy of your repository"\\n\\n# Cleanup function for temporary files\\ncleanup_temp_files() {\\n    echo "🧹 Cleaning up temporary files..."\\n    find /tmp -user root -name "claude-*" -type f -delete 2>/dev/null || true\\n    find /tmp -user root -name "*.tmp" -type f -delete 2>/dev/null || true\\n    find /var/tmp -user root -name "claude-*" -type f -delete 2>/dev/null || true\\n}\\n\\n# Set up cleanup trap\\ntrap cleanup_temp_files EXIT INT TERM\\n\\nif [ -d "/workspace/.git" ]; then\\n    echo "✅ Git repository detected in workspace"\\n    echo "📋 Current status:"\\n    git status\\n    echo ""\\n    echo "🔧 Starting Claude Code..."\\n    echo "💡 Changes will be isolated and will NOT affect the original repository"\\n    echo "📝 To save changes, use git commands to commit and push before exiting"\\n    echo "🔧 MCP servers: glootie, vexify, playwright"\\n    exec claude\\nelse\\n    echo "❌ Error: /workspace is not a valid git repository"\\n    exit 1\\nfi' > /usr/local/bin/start-isolated-sandbox.sh && chmod +x /usr/local/bin/start-isolated-sandbox.sh

CMD ["/usr/local/bin/start-isolated-sandbox.sh"]`;
}