#!/usr/bin/env node

/**
 * Auto-download Podman portable binaries
 * Similar to how sqlite/playwright auto-downloads platform-specific binaries
 */

import { existsSync, mkdirSync, chmodSync, unlinkSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { PODMAN_VERSION, DOWNLOADS } from './podman-config.js';
import { download, extractZip, extractTarGz } from './podman-extract.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const binDir = join(__dirname, '..', 'bin');

async function main() {
  const platform = process.platform;

  console.log(`\n📦 Setting up Podman portable binaries for ${platform}...`);

  if (!DOWNLOADS[platform]) {
    console.log(`⚠️  Platform ${platform} not supported for auto-download`);
    console.log(`   Skipping auto-download (will use system Podman if available)`);
    return;
  }

  if (!existsSync(binDir)) {
    mkdirSync(binDir, { recursive: true });
  }

  const { url, binary, extract } = DOWNLOADS[platform];
  const binaryPath = join(binDir, binary);

  if (existsSync(binaryPath)) {
    console.log(`✅ Podman already installed at ${binaryPath}`);
    return;
  }

  console.log(`📥 Downloading Podman v${PODMAN_VERSION}...`);

  const archiveName = url.split('/').pop();
  const archivePath = join(binDir, archiveName);

  try {
    const extractedDir = join(binDir, 'podman-4.9.3');
    if (existsSync(extractedDir)) {
      const fs = await import('fs/promises');
      await fs.rm(extractedDir, { recursive: true, force: true });
    }

    console.log(`   Downloading from GitHub releases...`);
    await download(url, archivePath);
    console.log(`✅ Downloaded successfully`);

    console.log(`📦 Extracting...`);
    if (extract === 'tar') {
      await extractTarGz(archivePath, binDir, 1);
    } else if (extract === 'unzip') {
      await extractZip(archivePath, binDir);

      if (platform === 'win32') {
        const extractedDir = join(binDir, `podman-4.9.3`);
        const extractedPodman = join(extractedDir, 'usr', 'bin', 'podman.exe');
        const targetPodman = join(binDir, binary);

        if (existsSync(extractedPodman)) {
          const fs = await import('fs/promises');
          await fs.copyFile(extractedPodman, targetPodman);
          await fs.rm(extractedDir, { recursive: true, force: true });
        }
      }
    }

    if (platform !== 'win32' && existsSync(binaryPath)) {
      chmodSync(binaryPath, 0o755);
    }

    console.log(`✅ Podman installed successfully!`);
    console.log(`   Binary: ${binaryPath}\n`);

    if (existsSync(archivePath)) {
      unlinkSync(archivePath);
    }

  } catch (error) {
    console.error(`⚠️  Auto-download failed: ${error.message}`);
    console.log(`\n💡 No problem! You can install Podman manually:`);
    if (platform === 'win32') {
      console.log(`   winget install RedHat.Podman`);
    } else if (platform === 'darwin') {
      console.log(`   brew install podman && podman machine init && podman machine start`);
    } else {
      console.log(`   sudo apt-get install podman  # Ubuntu/Debian`);
    }
    console.log(`\n   Or it will use system Podman if installed.\n`);
  }
}

main().catch(() => {
  // Silently fail - will use system Podman
});